{"posts":[{"data":{"title":"Rendering Markdown on React","date":"2020-07-08T00:00:00.000Z","tags":"javascript,react","excerpt":"In this post I explore how to use Markdown inside of React, the simple way.","slug":"2020-07-08-rendering-markdown-on-react","wordcount":765,"id":0},"isEmpty":false,"excerpt":"","body":"\nMarkdown (MD) is the Rich Text Format of developers. With it we can put on a screen our ideas in a visual way without having to rely on other, more complicated, markup languages.\n\nI want to explore the process to insert markdown on React components and maybe go further each time.\n\n## Limitations of Markdown\n\nFirst of, let's get this out of the way: Markdown limits itself to text. That means it's only capable of handing headings (`h1`...`h6`), text, lists, links and images. Any other elements like `main`, `section`, `div` is out of MD's scope.\n\n## Simple rendering\n\nHere, I want to render text like this:\n\n```markdown\n# Hello World!\n\nThis is Markdown.\n```\n\nAnd have it render like this in HTML:\n\n```html\n<h1>Hello World!</h1>\n<p>This is Markdown.</p>\n```\n\nFortunately, there's already a few libraries that can do this: [react-markdown](https://github.com/rexxars/react-markdown), [react-markdown-renderer](https://github.com/InsidersByte/react-markdown-renderer) and [react-mde](https://github.com/andrerpena/react-mde).\n\nI will use react-markdown for this example.\n\n```jsx\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport './styles.css'\n\nconst input = `\n# Hello World!\n\nThis is Markdown.\n`\n\nexport default function App() {\n  return (\n    <div className='App'>\n      <ReactMarkdown source={input} />\n    </div>\n  )\n}\n```\n\nAnd sure enough, that works! Here is the result in [Codesandbox](https://codesandbox.io/s/react-markdown-simple-demo-9tbb8?file=/src/App.js).\n\nThat was easy. Now for something a little more complicated.\n\n## Rendering from a file\n\nIs it as easy as importing the MD file from our JSX file? It is as easy as importing the MD file from our JSX file!\n\nUsing react-markdown, for its simplicity, again.\n\n```jsx\nimport React from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport HelloWorld from './hello-world.md'\nimport './styles.css'\n\nexport default function App() {\n  return (\n    <div className='App'>\n      <ReactMarkdown source={HelloWorld} />\n    </div>\n  )\n}\n```\n\nHere is the demo in [Codesandbox](https://codesandbox.io/s/react-markdown-from-file-demo-hni2h) again. It is even neater than the previous example. Now, something even more difficult.\n\n## Rendering multiple files\n\nFinally, I want to read multiple files at the same time and output their render as before.\n\nIn addition, I want to be able to output each file on it's own with a link.\n\nThis is done with a router. Fortunately, a [react-router](https://github.com/ReactTraining/react-router)Â exists! Even more so, I'm able to achieve what I wanted just reading at the first example in the page, which is excellent news. Also, Node has a module called `fs` that allows to read the file system, in this case our app environment. And it's as easy as a couple of lines. Assuming I have put my file on a a `/post` folder, I can execute this code.\n\n```jsx\nconst path = './src/posts/' // path for the MD files folder within our project\nconst fs = require('fs')\nconst fileList = fs.readdirSync('./src/posts') // creates an array of filenames\n```\n\nThen, I want to read the data contents, so I create a function for this.\n\n```jsx\nfunction getData(file) {\n  const data = fs.readFileSync(file, 'utf8')\n  return data ? data : null\n}\n```\n\nThis function takes a file and returns its content as a string. I have to declare encoding (`\"utf-8\"`) or else I get an array of number, which is the characters values in ASCII.\n\nNow I can create my app.\n\n```jsx\nexport default function App() {\n  return (\n    <div className='App'>\n      <Router>\n        <ul>\n          {fileList.map((post) => (\n            <li>\n              <Link to={`/${post}`}>{post}</Link>\n            </li>\n          ))}\n        </ul>\n\n        <Switch>\n          {fileList.map((post) => (\n            <Route path={`/${post}`}>\n              <ReactMarkdown source={getData(`${path}${post}`)} />\n            </Route>\n          ))}\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n```\n\nI have surround all my code on the `<Router>` component for it to work and create separate `.map` functions for the link list and the actual routing. The `<Switch>` component takes care of rendering the text formatted from markdown\n\nThe result, in [Codesandbox](https://codesandbox.io/s/react-markdown-multiple-files-mdhry), is a bit hacky since it uses the file name as the link text. But I'm satisfied that I could get the result I was looking for with relative ease. All I'm left with is to explore how to read certain lines from a file to extract the title and fix the link text."},{"data":{"title":"Git Submodules","date":"2020-10-13T00:00:00.000Z","tags":"git","excerpt":"What are Git submodules? Why would you want to use them? Git submodules explained.","slug":"2020-10-13-git-submodules","wordcount":910,"id":1},"isEmpty":false,"excerpt":"","body":"\n## What are Git Submodules?\n\nTo be really short and concise, Submodules in Git are repositories inside other repositories.\n\n## Why would I need Submodules?\n\nSometimes a project might become too large and needs some of its parts to be developed independently but can't be separated. You could start tracking them as Submodules to ease their development.\n\nAnother use case might be when exploring a new language or framework and developing a test app (like a to-do app, a Hacker News clone or a pomodoro timer) you might want to keep track of all those apps to come back to them later, but also all in one place. Submodules are suited for this as well.\n\n## How to use Git Submodules?\n\nLet's create a new folder for our demo project, initialize Git and make our first commit with a newly created file.\n\n```console\n$ mkdir submodules-demo\n$ cd submodules-demo\n$ git init\n$ echo \"# Git Submodules\" > README.md\n$ git add .\n$ git commit -m \"First commit\"\n$ git status\nOn branch main\nnothing to commit, working tree clean\n# push changes to a remote\n$ git remote add origin https://github.com/adcpe/submodule-demo.git\n$ git push -u origin main\n```\n\nThe repo is ready now.\n\nNow let's add a Submodule inside this repo. The Submodule can be an existing remote repo or a local new one. Let's take a look at both.\n\n### Adding an existing remote repo\n\nThe syntax for adding a existing remote repo is as follows.\n\n```console\n$ git submodule add [url] [destination folder (optional)]\n```\n\nNow let's add a real repo and rename it inside the parent repo.\n\n```console\n$ git submodule add https://github.com/adcpe/remote-sm-demo.git remote-demo\n```\n\nLet's commit this changes, using only one line to commit all current changes.\n\n```console\n$ git commit -am \"Added a new remote submodule\"\n[main 3914b02] Added a new remote submodule\n 2 files changed, 4 insertions(+)\n create mode 100644 .gitmodules\n create mode 160000 remote-demo\n$ git status\nOn branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n```\n\nNow let's take a look a the method for adding a new local repo.\n\n### Adding a new local repo\n\nFor this method, we have to start by creating a new folder inside the parent, then initializing Git inside it and finally adding the new folder as a submodule\n\n```console\n# create the folder and cd into it\n$ mkdir local-sm-demo\n$ cd local-sm-demo\n$ git init\n$ echo \"# local-sm-demo\" > README.md\n$ git commit -am \"First commit\"\n# go back to the parent folder\n$ cd ..\n# check the status of the parent repo\n$ git status\nOn branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\tmodified:   .gitmodules\n\tnew file:   local-sm-demo\n$ git commit -m \"Add the local submodule\"\n```\n\nWith this, now you have a fully functional local submodule.\n\nNote that this local submodule doesn't have a remote origin where it can be tracked independently. You should **always** do this but for this demo I will not.\n\n## .gitmodules\n\nYou might have noticed this file that was created when you added the first submodule. It's a simple and normally you don't need to do anything to it. Let's take a look at it.\n\n```\n[submodule \"remote-demo\"]\n\tpath = remote-demo\n\turl = https://github.com/adcpe/remote-sm-demo.git\n[submodule \"local-sm-demo\"]\n\tpath = local-sm-demo\n\turl = ./local-sm-demo\n```\n\nWe can see that the details of the submodules are here. Here's an explanation of the first 3 lines:\n\n- `[submodule \"remote-demo\"]` states the given name of this submodule.\n- `path = remote-demo` refers to the folder name where our submodule is stored inside the parent directory.\n- `url = git@github.com:adcpe/remote-sm-demo.git` is the URL path of our remote repo.\n\nYou could add submodules by editing this file directly but I think the command line method is faster.\n\n## Cloning repos with submodules\n\nWhen you clone a repository with submodules, Git only clone the parent repo. Meaning, it creates the folders for the submodules but doesn't clone the submodules from their origin.\n\nLet's delete our parent directory and clone it from the remote.\n\n```console\n$ cd ..\n$ rm -rf submodule-demo\n$ git clone https://github.com/adcpe/submodule-demo.git\n$ cd submodule-demo\n$ ls -a\n.git  local-sm-demo  remote-demo  .gitmodules  README.md\n# now let's check inside the remote-demo folder\n$ ls -a remote-demo\n$\n```\n\nThis last command shows that the folder is empty. Let's fetch its contents.\n\nFirst, we must initialize the submodules.\n\n```console\n$ git submodule init\nSubmodule 'local-sm-demo' (https://github.com/adcpe/submodule-demo.git/local-sm-demo) registered for path 'local-sm-demo'\nSubmodule 'remote-demo' (https://github.com/adcpe/remote-sm-demo.git) registered for path 'remote-demo'\n```\n\nThen, we can choose to fetch all submodules or select which one to fetch. Let's fetch the `remote-demo` submodule.\n\n```console\n$ git submodule update remote-demo/\nCloning into '/home/adc/gh/submodule-demo/remote-demo'...\nSubmodule path 'remote-demo': checked out '65ab769a363247ea7a6395e4fdc5b2652e4a8fdd'\n$ ls -a remote-demo\n.git  README.md\n```\n\nNow we have our submodule up to date with the remote.\n\n## A few considerations\n\n- If we try to update the `local-sm-demo` directory we will get an error. This happens because the local repo had its commit history stored only locally. If we run the command it will try to pull from a non-existing history. It was deleted when the parent folder was deleted.\n- Every time you make a change inside a submodule, you commit changes as usual inside the folder. Then, you have to commit the changes in the parent directory so that you can later recall what was the latest state of the submodule.\n\n## Wrapping up\n\nSubmodules are useful and they can be used on large projects with many sub-projects or with projects that are similar and need to be tracked separately. I mostly use them for the latter because it allows me to keep track of test projects on new languages or frameworks.\n\nFor more information on Git Submodules, refer to [Gitâs documentation](https://git-scm.com/book/en/v2/Git-Tools-Submodules).\n\nI hope this is as useful for you as it was for me writing it."},{"data":{"title":"Setting up Ruby for VSCode","date":"2021-02-04T00:00:00.000Z","tags":"ruby,vscode","excerpt":"This is how I set up VSCode to write Ruby.","slug":"2021-02-04-ruby-vscode","wordcount":369,"id":2},"isEmpty":false,"excerpt":"","body":"\nHere is a little guide to setting up IntelliSense and auto-completion on VSCode for Ruby quickly.\nRequirements\n\nMight seem a bit obvious, but you need the following in your computer:\n\n[VSCode](https://code.visualstudio.com/)\n\n[Ruby](https://www.ruby-lang.org/en/downloads/)\n\n## What will be installed?\n\n[Rubocop](https://rubocop.org/)\n\nFrom its page: The Ruby Linter/Formatter that Serves and Protects. Itâs just that. A linter and formatter that takes rules from a configuration file ad applies them to Ruby files.\n\n[Airbnb Ruby style guide](https://github.com/airbnb/ruby)\n\nI use this one because its widespread and sane. I also use their [JavaScript style guide](https://github.com/airbnb/javascript).\n\n[Solargraph](https://solargraph.org/)\n\nSolargraph is a Ruby gem that provides intellisense features through Microsoftâs language server protocol. It can also lint and format code, but I find Rubocop better for that task.\n\n[Ruby extension for VSCode](https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby)\n\n[Solargraph extension for VSCode]()\n\n## What is IntelliSense?\n\nIn a nutshell, IntelliSense provides autocomplete for your code (names for methods, classes, etc) and also inline documentation. For example, if you want to apply a Ruby method on an array, it will present you with all the methods for arrays as you type. Itâs very useful and can speed up coding a lot.\n\n## The installation\n\n### Gem installation\n\nIn a terminal, enter this command:\n\n```console\ngem install solargraph rubocop-airbnb\n```\n\nIt installs Solargraph and the Airbnb extension for Rubocop, which in turn installs Rubocop. Itâs better to install Rubocop in this way only because VSCode reports of conflicting versions in the system otherwise. Extension installation\n\nThen, we install the VSCode extensions. You could look for `ruby.rebornix` and `castwide.solargraph` on the extension marketplace inside VSCode or copy/paste this commands on the command palette (usually Ctrl/Cmd + Shift + P or F1.)\n\n```console\next install rebornix.Ruby\next install castwide.solargraph\n```\n\nNote: remember to remove the `>` that appears on the command palette.\n\n## Configurations\n\n### System configuration\n\nRubocop will take a global configuration file on your home directory. In Linux the path is `/home/<your-username>` and on Windows it should be `C:\\Users\\<your-username>`.\n\nThe filename is `.rubocop.yml` and it must contain these two lines.\n\n```yml\nrequire:\n  - rubocop-airbnb\n```\n\n### VSCode settings\n\nIn VSCode, we need to edit settings.json. Copy and paste these lines and edit them with your values.\n\n```json\n\"ruby.interpreter.commandPath\": \"path/to/ruby\",\n\"ruby.useLanguageServer\": true,\n\"ruby.useBundler\": true,\n\n\"solargraph.commandPath\": \"path/to/solargraph\",\n\"solargraph.formatting\": true,\n\"solargraph.diagnostics\": true,\n\"[ruby]\": { \"editor.defaultFormatter\": \"castwide.solargraph\" },\n```\n\nTo find the correct paths to Ruby and Solargraph, enter these commands depending on your OS.\n\n#### Linux\n\n```console\nwhich ruby which solargraph\n```\n\n##### Windows\n\n```console\nwhere ruby where solargraph\n```\n\nAnd thatâs it. With that, VSCode is now a great environment for writing Ruby code."},{"data":{"title":"On Restarting","date":"2022-11-17T00:00:00.000Z","tags":"personal","excerpt":"In this short post, I reflect about my time away from this space.","slug":"2022-11-17-on-restarting","wordcount":153,"id":3},"isEmpty":false,"excerpt":"","body":"\nFor a long time I thought of a personal website as a chore. I'm not a much of a UI guy. I don't think I make compelling website designs. I don't know how to pick colors. I have a vague idea about fonts. I know which ones I like and they are mostly monospaced fonts. That's pretty much as far as far as I go.\n\nBut the reason I started making a website again was because I'm feeling it lately. There's this curiosity and desire to create that's coming back and needs to be satisfied. Guess I was blocked or tired or both. I'm just glad it's over now because I need it. And, finally, I'm treating this website as a digital garden, which means I can work on it whenever I'm feeling in the mood.\n\nI want to write about my ongoing projects, but I want to finish at least one of them first."},{"data":{"title":"Using Github/Gitlab as my CDN/API","date":"2022-11-20T00:00:00.000Z","tags":"blogging,experiment","excerpt":"How I went from a big content platform to a small JSON file hosted on Github for my blog.","slug":"2022-11-20-using-github-as-my-cdn-api","wordcount":480,"id":4},"isEmpty":false,"excerpt":"","body":"\nNow that I'm more into blogging than any other time in my life, I wanted to start using this space more than ever.\n\nMy website is (or will be, because as of writing this post is not yet out) just a static site made with [Eleventy](https://www.11ty.dev/) and the blog will be a collection of all my posts, naturally. With this idea, I wanted to serve myself markdown files in the cheapest way possible.\n\nPreviously I had used [Sanity](https://www.sanity.io/). Sanity is alright. I get the appeal of it for teams that create content, but for me its just overkill. And the other side of it, I don't feel like I have my posts. Sanity could disappear any day and it would be a hassle to get my posts out of there. I wanted something that is future proof and that I have control of.\n\nImmediately I thought about writing an API in NodeJS or Ruby on Rails or maybe even Laravel. That's too much maintenance though. Sure, would make an interesting learning experience and probably another post, but I already had to build the site and other projects. Besides, I just wanted to write and the server costs were unappealing.\n\nSo after a while thinking about this problem I realized the solution was in front of me. Serving my posts from a Git repository was my original idea. The repo would be just markdown files with front matter. Very simple.\n\nWhat if I could just retrieve them with [axios](https://github.com/axios/axios) requests? Then I remembered that you can view files from `raw.githubusercontent.com`. That's perfect.\n\n## The solution\n\nGreat! Now I just need a way to get the filenames on the posts folder. So I created a basic script with NodeJS using `fs` to write the filenames to a file and I'll push that along with the markdown files to Github. Then I would point my request to that file to get the other filenames and then I'd get the contents of my markdown files.\n\n## Extending my idea\n\nCan I get all my files with a single request instead of having to iterate over the file list? That's putting more processing on the initial file list creation.\n\nIn my research I came upon [gray-matter](https://github.com/jonschlinkert/gray-matter), a handy npm package that takes markdown and spits out an object with the content and data from front matter.\n\nAwesome!\n\nSo, out of this my little script grew a bit more with gray-matter processing the `.md` files. I also couldn't push this data to a simple `.txt` files. The script would create a `.json` files instead and I also added some other metadata to the object. This is way more powerful than my simple file list.\n\nThe repository is living now in [Github](https://github.com/adcpe/blog-content) but I will create a mirror on Gitlab just in case.\n\n### Mine\n\nThis was a very fun problem to solve and I learned a bit with it. Now my content is truly mine, its portable and hopefully future proof."},{"data":{"title":"My Journey to Eleventy","date":"2022-11-29T00:00:00.000Z","tags":"personal,blogging","excerpt":"Jekyll: â. VueJS: â. Nuxt: â. Eleventy: â","slug":"2022-11-29-journey-to-eleventy","wordcount":938,"id":5},"isEmpty":false,"excerpt":"","body":"\nI've had [several](https://v1.adc.pe/) [iterations](https://v2.adc.pe/) [of my website](https://v3.adc.pe/) [over the years](https://v4.adc.pe/). For something so sparse on updates and content it's a bit crazy that I did so many. Seems like I took more time creating them than iterating on them and things that were worth my time and the time of whoever might visit the site.\n\nInitially, my website was intended to be a place for a potential blog and a place where I can show my projects. This time I'm revisiting that idea. What's changing its the commitment I'm putting into it.\n\nSo, how did I get here?\n\n## V1\n\nV1 was done quickly on Jekyll. Jekyll was my first choice because it relies on Ruby. I like Ruby because it's mature and developer friendly. It was a natural choice for me.\n\nThe main reason I abandoned it was because I didn't want my blog posts to be embedded on the same git repository as my website. Even back then I wanted some portability for my blog posts. And that marked the end for my Jekyll exploration.\n\n## V2 & V3\n\nV2 and V3 are the same site. One is built using [vue-cli](https://cli.vuejs.org/) (discontinued) and the other with what must have been [Nuxt 2](https://nuxtjs.org/) with Vue 2.\n\nIf I had to guess V2 was the one with Nuxt and then I re-did because I wanted the pure VueJS experience and maybe because Nuxt was overkill for my purposes. (A quick check tells me I'm right, V2 was made with Nuxt)\n\nThis time I used the [previously discussed](/blog/2022-11-20-using-github-as-my-cdn-api) [Sanity](https://www.sanity.io/) to serve my blog posts. As I said, Sanity is great so that's why I was using it at the time. It was also hyped up at the time because it was a new technology so I gave it a try.\n\nAt this time I thought I was entering a period of stability with my website which it did, but not in the that way I was expecting.\n\n## The hiatus\n\nAfter a few blog posts I just lost interest in maintaining a website and a blog so it was left to _rot_. At this time I started to use React more because of work and more Node.js in general.\n\nMy lack of interest was in part because I didn't really have the time for it and I didn't have the will either; and you really do need both of those.\n\nEarlier this year I got the itch again and wanted to do a complete re-do, one more time.\n\n## V4\n\nOkay, so first thing: I based my initial idea on [another website I really like](https://brittanychiang.com/).\n\nIt is kind of a rip-off honestly. But I liked it nonetheless.\n\nThere's not much to say about this one. I was using a pre-release version of [Nuxt 3](https://nuxt.com/). So overkill. But I told myself that this would get me acquainted with the changes of Nuxt 3. It served its purpose because I did learn a bit from it, but the scope of a personal website is not something that requires a framework like Nuxt. To be clear, many people use Nuxt for their website and that's great, but it's not for me and not for this website.\n\nNuxt takes many decisions for you, like including a router and having many abstractions from Vue. Some of these can be overridden, but at that point I'd rather use pure Vue.\n\nAgain, Nuxt is great and I'm sure I would be very happy using it at a professional level but for small-ish project like my site, I wanted something more minimal.\n\nThe main point for Nuxt against Vue is that Nuxt can generate static sites. My next choice would expand on this.\n\n## On to Eleventy\n\nI have had my eyes on [Eleventy](https://www.11ty.dev/) for quite a while. Eleventy (11ty) is a static site generator for Node.js. This means that all the pages on a site can be compiled before being being served.\n\nJekyll is a static site generator as well. Vue, however, can't generates static pages. Vue is better suited for single page applications (SPA) which can be very fast.\n\nThe drawback of this approach is that I didn't want to end up relying on too much JS for rendering my pages and I didn't wanted to lose on search engine optimization (SEO).\n\nA feature of 11ty that is very appealing is that you can use a vast array of templating languages, from plain HTML, Nunjucks, Liquid, etc.\n\nMy choice for templating was [Pug](https://pugjs.org/). I've always liked Pug because it has a very clean syntax that relies on indentation rather than tags like most other templating languages. 11ty doesn't have the best Pug support of all of them. But the community is very large I haven't ran into an issue that I wasn't able to solve.\n\nFor stylesheets I'm using [Sass](https://sass-lang.com/), which I think its a great complement for Pug because it relies on indentation too. I was using [Stylus](https://stylus-lang.com/) initially, which has a similar syntax to Sass. However, I found the extension support for it on VSCode a bit lacking so I switched to Sass instead.\n\nThere are great resources for 11ty at [11ty.rocks](https://11ty.rocks/). It has beginner tutorials, project starters and other stuff that helped me get started. Not many for Pug with 11ty but Pug is very simple and well documented.\n\n## The Future\n\nI plan on sticking with 11ty for a long time. It is very flexible and using the Node.js environment is a big plus. The community is huge and I have faith that Pug support and documentation on 11ty's end can only get better.\n\nFor the moment, I'm still thinking of little tweaks I can make and things that I can add. I enjoy my time working with this stack. It might not be VueJS but it's a worthy replacement, in my eyes."},{"data":{"title":"My Wishlist for 2023","date":"2022-12-30T00:00:00.000Z","tags":"personal","excerpt":"I have a few wishes for 2023. In this post I flesh them out.","slug":"2022-12-30-wishlist-2023","wordcount":720,"id":6},"isEmpty":false,"excerpt":"","body":"\nIt's been a month since my last post. I didn't intend for it to take so long between posts but December is a busy month when my productivity slows down.\n\nI've been working heavily on Twin. Twin started as a theme for [VSCode](https://code.visualstudio.com/) and [Kitty](https://sw.kovidgoyal.net/kitty/), but with the inspiration from [Dracula](https://draculatheme.com/), [Nord](https://www.nordtheme.com/) and [Halcyon](https://halcyon-theme.netlify.app/) I think I want to it to go bigger. The name was chosen because Twin is actually two themes: Blue and Grey. As most themes start, I want something that is tailored for me. Dracula is good, but the foreground color is too close to white. I need something that is more neutral. Nord is fine too, but it's too flat for my tastes. Halcyon is closer too what I want to get and its partly on [Ayu](https://github.com/ayu-theme) which is what I'm using already VSCode. I'm also referencing various design choices from [Night Owl](https://github.com/sdras/night-owl-vscode-theme).\n\nThat's it for my current projects status right now.\n\n## 2023\n\nDoing New Years resolutions is something that I have made before, but I have never followed through with it. I didn't hold myself accountable. That's the easy way out, sadly. This year I want it to be different.\n\n2022 was a low year for me. When it started I was already reaching burn-out from work and between March and April I had reached my limit. I was being over-worked, my output was very poor and the place I was in was not fulfilling my need. After that, I needed some time to find joy in coding again and it took me quite some time indeed. But right now I'm reaching the point where I NEED to find work fast. This leads into my first wish for 2023.\n\n### Find a job\n\nI realize what's going on with the tech industry for a few months. Massive lay-offs have hit big tech companies and, while I don't think I'm too affected by these because of my location and level of experience, I feel like it has made everyone somewhat scared. And also, I have definitely seen people announce that they were laid-off in LinkedIn. (Side note: the spanish word people has been using to sugar-coat it is \"desvincular\". This roughly translates to \"unbind\". I hate the euphemism in this case. If it had been me, I would just be frank and direct and say \"fired\".)\n\nIdeally, I would want to keep working remotely and the stack would be in JavaScript and/or Ruby. My previous job was React with PHP/Laravel and the latter I would like to avoid if possible. I can do it but PHP is not a language that gets me excited. I would sooner learn another language.\n\n### Learn a new programming language\n\nThis one is easy. I've stuck with Ruby and JS for a long time now, and I consider myself fluent enough in PHP to use in a professional setting. Admittedly, I'm a little rusty in Ruby right now but I'm going to start using it more soon.\n\nThe new language could be Python or Rust as strong candidates. Go and Kotlin are in the maybe category but less likely. Lately I've been learning a lot about shell scripting, particularly Fish, and I obviously would like to get better at it.\n\n### Contribute to open source\n\nThis is something I should've done much sooner. Things I use a lot and that I could get familiar with to contribute are Pug, VSCode, VueJS and Kitty. Ideally I would contribute to one of those in some aspect, but we will see.\n\n### Launch Twin Theme\n\nNow, for the easiest one in the list.\n\nAs I said before, Twin started as simply a theme for VSCode and Kitty. But I'm starting to get interested enough with it that I could port it to several other tools. These include Alacritty, Slack, Firefox, Sublime Text and other tools which I use in passing or that are simple to port.\n\nI truly believe that I have a pair of good color schemes and I hope people like and contribute.\n\n### Website redesign/evolution\n\nThis is the obvious one. In its current state, this site is not very appealing to look at.\n\n## To 2023\n\nSomehow I can't shake the feeling that this lis is too short or not ambitious enough. But I'm going to stop right now so I can publish this before 2022 ends. I might revisit this during 2023 and will definitely do progress updates."},{"data":{"title":"Introducing - Twin Themes","date":"2023-02-09T00:00:00.000Z","tags":"vscode","excerpt":"I made themes for VSCode. This is how.","slug":"2023-02-09-introducing-twin-themes","wordcount":787,"id":7},"isEmpty":false,"excerpt":"","body":"\nAs I have mentioned before, I was working on a Twin Themes, a pair of themes for [VSCode](https://code.visualstudio.com/) & [VSCodium](https://vscodium.com/) that focus on readability and comfort for all-day use.\n\nI finally did it. I finished them and they are now available from the [Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=twin-themes.twin-vsc) and the [Open-VSX Registry](https://open-vsx.org/extension/twin-themes/twin-vsc).\n\nThe process took me a little over two months because I was working on and off on them. Work also stopped during the holidays and I didn't start again until mid-January.\n\nThey were not supposed to be aimed for VSCode in the first place. And that is where it all begins.\n\n## The idea\n\nI use the terminal a lot. If I had to guess, I divide my time between teminal applications and GUI applications in a 30-70 split, maybe even closer. Firefox must be #1, but my terminal, [Kitty](https://sw.kovidgoyal.net/kitty/), must be #2.\n\nI've always been a fan of changing up the theming of code editor and my terminal. I change colors and fonts every couple of weeks from a selection of favorites just to make things fresh again.\n\nI have had the theming bug for a long time, specially with VSCode. The thing about it is that for a first time themer, VSCode seems very complicated and time-consuming (I can only imagine this is the case with most IDEs and text editors.) This time I decided not to start theming VSCode, but instead theme Kitty. I didn't even think about VSCode when I started.\n\nThis was to my advantage. Terminals are simpler to theme. Basic theming can be done with only sixteen colors. Eight normal colors and eight _bright_ colors that are usually derived from the normal colors. Normally this are black, red, green, yellow, blue, magenta, cyan and white. Add one more for a background color and another for a foreground color and you're done\n\n## Vanity hex-colors came in handy\n\nThe first step for me, was finding a suitable background color and this was always a point where I suffered analysis-paralysis. My thought process was always something like this. In circles.\n\n> Is `#171717` better or worse than `#202020`? How will it look with `blue` letters? Oh hey, I found the absolute best background color! No wait, this one is better...\n\nThe answer was in using something that was meaningful for me and then all the other colors would have to adapt to it. I've always been _enthusiatic_ about hex-colors words. Hex-colors that can be read as words like `#d00d1e` or `#b0771e`. Vanity hex-colors would be a variation of this. They have some significance to the person using them. For example, `#ADC` (also read as `#AADDCC`), my initials, is a [very relaxing pastel green](https://www.color-hex.com/color/aaddcc) and would be a vanity hex-color.\n\nBut I didn't want to use `#ADC` cause I didn't like it for what I was doing. So my next best thing was to try out what I get from three number I like: **11**, **22** and **39**. [`#112239`](https://www.color-hex.com/color/112239) is actually very good for a dark background color. Its darker than navy blue and it feels like its in the right spot between light and dark for what I was looking for.\n\nAfter this discovery, I started to throw shit around and seeing what I get. [`#223911`](https://www.color-hex.com/color/223911) its green. Not interested. [`#392211`](https://www.color-hex.com/color/392211) is brown-ish. Pass.\n\nWhat about my initials with some numbers? [`#ADC111`](https://www.color-hex.com/color/ADC111), [`#ADC222`](https://www.color-hex.com/color/ADC222), [`#111ADC`](https://www.color-hex.com/color/111ADC), [`#222ADC`](https://www.color-hex.com/color/222ADC) are a no-go. After a few tries I came upon [`#2A2D2C`](https://www.color-hex.com/color/2A2D2C) and I liked it. I would say its a black, but not completely dark. More like a dark-grey. I liked it on the spot and I had to use it.\n\n## One became two\n\nI ended up having two background colors I liked. Now I had to complete the palette.\n\nMy initial idea was to take colors from minerals like jade, ruby, sapphire and the like to fill the palette. I did that initially but after testing contrast between them I wasn't pleased. I started tweaking them, changing the hex values ever so slightly. Some colors were easy to get like red and green. Others like yellow and orange (which I use in place of cyan) were harder. And I also had to do this twice since I had decided I was going to make two themes.\n\nTurns out hex-colors were not enough. There's also [proof](https://chriscoyier.net/2023/02/01/hex-colors-arent-great-at-anything-except-being-popular/) about this (the article was written after I had decided to move on from hex-colors.) So I started to play with HSL: hue, saturation, lightness. I started matching hues for colors on both themes and only changing the levels of saturation and lightness, then match those differences accross all colors so that the palette looks consistent. This was game changing. It helped me speed up a lot of decisions and it helped with contrast betwen colors.\n\nAt this point I had already finished Kitty theming and and was already theming VSCode."}]}
